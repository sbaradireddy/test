-- Step 1: Create Temporary Table for SQ_S10_NJ_DMV_EXTRACT
CREATE OR REPLACE TEMPORARY TABLE SQ_S10_NJ_DMV_EXTRACT AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY TPDH.POL_PK) AS source_record_id,
    TPAH.STATE,
    TPAH.CNTY,
    TPAH.PSTL_CD,
    TPDH.PRE_CONV_CO_CD,
    TPAH.ADDR_PK,
    TPAH.PMRY_ADDR_FLG,
    TPAH.HSE_NUM,
    TPDH.POL_PK,
    TPDH.POL_NUM,
    TPDH.POL_SEQ_NUM,
    TPDH.LAPSE_BEGIN_DT,
    TPDH.LAPSE_END_DT,
    TPDH.DATA_DT,
    TPDH.PROD_CD,
    TPDH.PLN_CD,
    TPDH.CNCL_TYP,
    TPDH.POL_VRSN_TXN_TYP,
    TPDH.ROW_STAT,
    TPDH.CUR_TERM_EFF_DT,
    TPDH.CUR_TERM_XPTN_DT,
    TPDH.CNCL_RSN,
    TPDH.RCD_ACTN_TYP,
    TPFDH.PRIME_CONV_FLG,
    TPFDH.PRIME_POL_FLG,
    TPCTH.VEH_CT,
    TPDH.PRCSG_GRP_CD,
    TPDH.POL_STATE_STAT,
    TPDH.SRC_POL_ID,
    TPDH.CO_ID,
    TPDH.PROD_ID,
    TPDH.POL_STATE_VRSN,
    TPDH.POL_STATE_EFF_DT,
    TPDH.ROW_XPTN_DT,
    TPDH.CORP_CD,
    TPDH.CO_CD,
    TPDH.SRC_PROD_ID,
    TPDH.SRC_CD,
    TPDH.CNCL_EFF_DT,
    TPDH.REINST_EFF_DT,
    TPDH.ACCTG_DT,
    TPDH.REINST_TYP,
    TPPDH.DRVR_LIC_NUM,
    TPPDH.DRVR_LIC_STATE,
    TPPDH.INSD_PTY_PK,
    TPPDH.SRC_PTY_ID,
    TPPDH.NAM_FST,
    TPPDH.NAM_LST,
    TPPDH.NAM_MDL,
    TPPDH.NAM_SFX,
    TPPDH.BUS_NAM,
    TPPDH.PMRY_NAMD_INSD_FLG,
    TPPDH.NAMD_INSD_FLG,
    TPPDH.DRVR_FLG,
    TPVUDH.STAT_MAKE_CD,
    TPVUDH.MODEL_YR,
    TPVUDH.MK,
    TPVUDH.VEH_UNIT_PK,
    TPVUDH.RCD_ACTN_TYP AS RCD_ACTN_TYP_veh,
    TPVUDH.ORGL_EFF_DT,
    TPVUDH.VEH_TYP_CD,
    TPVUDH.VIN,
    TCD.SRC_CORP_ID,
    TCD.SRC_CO_ID,
    TPAH.ADDRESS1,
    TPAH.ADDRESS2,
    TPAH.ADDRESS3,
    TPAH.ADDRESS4,
    TPAH.CITY
FROM 
    CDWQA.DWADMN.T_POL_ADDR_DIM_HST TPAH
JOIN 
    CDWQA.DWADMN.T_POL_DIM_HST TPDH ON TPAH.POL_PK = TPDH.POL_PK
JOIN 
    CDWQA.DWADMN.T_POL_PTY_DIM_HST TPPDH ON TPPDH.POL_PK = TPDH.POL_PK
JOIN 
    CDWQA.DWADMN.T_POL_FLG_DIM_HST TPFDH ON TPFDH.POL_PK = TPDH.POL_PK
JOIN 
    CDWQA.DWADMN.T_POL_CT_DIM_HST TPCTH ON TPCTH.POL_PK = TPDH.POL_PK
JOIN 
    CDWQA.DWADMN.T_POL_VEH_UNIT_DIM_HST TPVUDH ON TPVUDH.POL_PK = TPDH.POL_PK
JOIN 
    CDWQA.DWADMN.T_CO_DIM TCD ON TPDH.CO_ID = TCD.CO_ID
WHERE 
    RTRIM(TPDH.PRCSG_GRP_CD) IN ('HP', 'PL') AND
    RTRIM(TPDH.STATE_CD) = 'NJ' AND
    RTRIM(TPDH.CO_CD) IN ('HPPREF', 'HPPROP', 'HPPROP2', 'HPSIC', 'PAIPTWIN', 'PIC', 'PSIA', 'TCTIPU', 'TCTIPU2', 'ALN_HPCIC', 'ALN_TEACH', 'ALN_PSIA', 'ALN_PIC') AND
    RTRIM(TPDH.CORP_CD) IN ('HIGHPOINT', 'Palisades') AND
    (
        (RTRIM(TPDH.PROD_CD) IN ('PA', 'PAIP')) OR
        (RTRIM(TPDH.PROD_CD) = 'PIC_NEW_CA' AND TPDH.LEG_ENT_CD = 'A') OR
        (RTRIM(TPDH.PROD_CD) = 'PIC_NEW_CA' AND LTRIM(RTRIM(TPVUDH.VEH_TYP_CD)) = 'LMO' AND TPCTH.VEH_CT <= 5)
    ) AND
    TPDH.RCD_ACTN_TYP <> 'D' AND
    (
        (TPDH.ACCTG_DT <= '2024-09-30' AND TPDH.POL_STATE_EFF_DT <= '2024-08-31' AND TPDH.POL_STATE_EFF_DT >= '2024-08-01') OR
        (TPDH.ACCTG_DT <= '2024-09-30' AND TPDH.ACCTG_DT >= '2024-09-01' AND TPDH.POL_STATE_EFF_DT < '2024-08-01')
    ) AND
    (
        (TPDH.Pol_Vrsn_Txn_Typ = 'NB' AND (TPDH.conv_pol = 'N' OR TPDH.conv_pol IS NULL)) OR
        (TPFDH.PRIME_CONV_FLG = 'Y' AND TPDH.CO_CD = 'ALN_PIC' AND TPDH.POL_VRSN_TXN_TYP = 'RN') OR
        (TPFDH.PRIME_CONV_FLG = 'Y' AND TPDH.CO_CD = 'ALN_PSIA' AND TPDH.POL_VRSN_TXN_TYP = 'RN' AND TPDH.PRE_CONV_CO_CD = 'PIC') OR
        (TPDH.Pol_Vrsn_Txn_Typ = 'RN' AND TPDH.ict_dt = TPDH.cur_term_eff_dt AND TPCTH.ict_ct = 1) OR
        (SUBSTR(TPDH.POL_VRSN_TXN_TYP,1,2) = 'EN' AND TPVUDH.RCD_ACTN_TYP = 'A' AND TPDH.POL_STATE_EFF_DT >= TPDH.CUR_TERM_EFF_DT) OR
        (RTRIM(LTRIM(TPDH.POL_VRSN_TXN_TYP)) IN ('CN', 'CNX') AND RTRIM(LTRIM(TPDH.CNCL_RSN)) IN ('NONPAY','NP','NP_CR','NP_PF')) OR
        (SUBSTR(TPDH.POL_VRSN_TXN_TYP,1,2) = 'RS' AND RTRIM(LTRIM(TPDH.REINST_TYP)) = 'WITH LAPSE' AND RTRIM(LTRIM(TPDH.CNCL_RSN)) IN ('NONPAY','NP','NP_CR','NP_PF')) OR
        (SUBSTR(TPDH.POL_VRSN_TXN_TYP,1,2) = 'RS' AND RTRIM(LTRIM(TPDH.REINST_TYP)) = 'REINSTATE' AND RTRIM(LTRIM(TPDH.CNCL_RSN)) IN ('NONPAY','NP','NP_CR','NP_PF') AND TPDH.ROW_STAT = 'C')
    ) AND
    TPVUDH.Veh_Typ_Cd IN ('AQ', 'CL', 'CV', 'PP', 'PPA', 'PPP','LMO','VAN') AND
    TPPDH.Pmry_Namd_Insd_Flg = 'Y' AND
    TPAH.Pmry_Addr_Flg = 'Y' AND
    (TPFDH.MOTORCYCLE_POL_FLG != 'Y' OR TPFDH.MOTORCYCLE_POL_FLG IS NULL) AND
    NOT EXISTS (
        SELECT 1
        FROM RRM.T_ESS_SMOKETEST_POLICIES
        WHERE 
            T_ESS_SMOKETEST_POLICIES.STATE_CD = TPDH.STATE_CD AND
            T_ESS_SMOKETEST_POLICIES.POL_NUM = TPDH.POL_NUM
    );






-- Step 2: Create Temporary Table for EXPTRANS
CREATE OR REPLACE TEMPORARY TABLE EXPTRANS AS
SELECT 
    SE.source_record_id,
    SE.POL_PK,
    SE.POL_NUM,
    SE.POL_SEQ_NUM,
    SE.POL_STATE_VRSN,
    SE.POL_STATE_EFF_DT,
    SE.ROW_XPTN_DT,
    SE.POL_VRSN_TXN_TYP,
    SE.ROW_STAT,
    SE.RCD_ACTN_TYP,
    SE.DATA_DT,
    SE.PRIME_POL_FLG,
    SE.PRCSG_GRP_CD,
    SE.POL_STATE_STAT,
    SE.SRC_POL_ID,
    SE.CO_ID,
    SE.PROD_ID,
    SE.CORP_CD,
    SE.CO_CD,
    SE.SRC_PROD_ID,
    SE.PROD_CD,
    SE.PLN_CD,
    SE.CUR_TERM_EFF_DT,
    SE.CUR_TERM_XPTN_DT,
    SE.CNCL_RSN,
    SE.CNCL_TYP,
    SE.CNCL_EFF_DT,
    SE.REINST_EFF_DT,
    SE.ACCTG_DT,
    SE.REINST_TYP,
    SE.LAPSE_BEGIN_DT,
    SE.LAPSE_END_DT,
    SE.VEH_UNIT_PK,
    SE.RCD_ACTN_TYP_veh,
    SE.ORGL_EFF_DT,
    SE.VEH_TYP_CD,
    SE.VIN,
    SE.MODEL_YR,
    SE.MK,
    SE.STAT_MAKE_CD,
    SE.ADDR_PK,
    SE.PMRY_ADDR_FLG,
    SE.HSE_NUM,
    SE.ADDRESS1,
    SE.ADDRESS2,
    SE.ADDRESS3,
    SE.ADDRESS4,
    SE.CITY,
    SE.STATE,
    SE.CNTY,
    SE.PSTL_CD,
    SE.INSD_PTY_PK,
    SE.SRC_PTY_ID,
    SE.NAM_FST,
    SE.NAM_LST,
    SE.NAM_MDL,
    SE.NAM_SFX,
    SE.BUS_NAM,
    SE.PMRY_NAMD_INSD_FLG,
    SE.NAMD_INSD_FLG,
    SE.DRVR_FLG,
    SE.DRVR_LIC_NUM,
    SE.DRVR_LIC_STATE,
    -- Transformation Columns
    SUBSTR(SE.PSTL_CD,1,5) AS ZIP_FIRST5_CD,
    SUBSTR(SE.PSTL_CD,7,4) AS ZIP_PLUS_CD,
    REGEXP_REPLACE('2024-09-01', CHR(39), NULL, 1, 0, 'c') AS v_BATCH_START_DT,
    REGEXP_REPLACE('2024-09-30', CHR(39), NULL, 1, 0, 'c') AS v_BATCH_END_DT,
    REGEXP_REPLACE('2024-08-01', CHR(39), NULL, 1, 0, 'c') AS v_RPRTG_PERIOD_START_DT,
    REGEXP_REPLACE('2024-08-31', CHR(39), NULL, 1, 0, 'c') AS v_RPRTG_PERIOD_END_DT,
    IFF(
        SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'RN' AND SE.PRIME_CONV_FLG = 'Y' AND SE.CO_CD = 'ALN_PSIA' AND SE.PRE_CONV_CO_CD = 'PIC', 'NB',
        IFF(
            SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'RN' AND SE.PRIME_CONV_FLG = 'Y' AND SE.CO_CD = 'ALN_PIC', 'NB',
            IFF(
                SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'NB', 'NB',
                IFF(
                    SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'CN', 'CN',
                    IFF(
                        SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'RN', 'RN',
                        IFF(
                            SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'EN', 'AV',
                            IFF(
                                SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) = 'RS', 'RS', ''
                            )
                        )
                    )
                )
            )
        )
    ) AS DMV_TRANS_TYPE,
    UPPER(SE.MK) AS MK_caps,
    RPAD(UPPER(LTRIM(RTRIM(SE.VIN))),19,' ') AS DMV_VIN,
    IFF(
        SE.DRVR_LIC_NUM IS NULL OR SE.DRVR_LIC_STATE != 'NJ',
        '               ',
        RPAD(UPPER(LTRIM(RTRIM(SE.DRVR_LIC_NUM))),15,' ')
    ) AS DMV_DRIVER_LICENSE_NUMBER,
    RPAD(UPPER(LTRIM(RTRIM(SE.STAT_MAKE_CD))),5,' ') AS DMV_MAKE_OF_CAR,
    IFF(
        SE.MODEL_YR IS NULL OR SE.MODEL_YR = 0,
        '     ',
        RPAD(LTRIM(RTRIM(TO_CHAR(SE.MODEL_YR))),4,' ')
    ) AS DMV_YEAR_OF_CAR,
    '     ' AS DMV_MODEL_OF_CAR,
    DECODE(
        RTRIM(LTRIM(SE.CO_CD)),
        'PIC', '4895',
        'PSIA', '4840',
        'HPPREF','4808',
        'HPSIC','4875',
        'HPPROP','4876',
        'HPPROP2','4876',
        'TCTIPU','4946',
        'TCTIPU2','4946',
        'PAIPTWIN','4927',
        'ALN_HPCIC','4876',
        'ALN_TEACH','4946',
        'ALN_PSIA','4840',
        'ALN_PIC','4895',
        'XXXX'
    ) AS DMV_INS_COMPANY_CD,
    RPAD(UPPER(LTRIM(RTRIM(SE.HSE_NUM))) || ' ' || UPPER(LTRIM(RTRIM(SE.ADDRESS1))),30,' ') AS DMV_POLICY_OWNER_STREET_ADDR,
    RPAD(UPPER(LTRIM(RTRIM(SE.CITY))),20,' ') AS DMV_POLICY_OWNER_CITY,
    RPAD(UPPER(LTRIM(RTRIM(SE.STATE))),2,' ') AS DMV_POLICY_OWNER_STATE,
    RPAD(LTRIM(RTRIM(ZIP_FIRST5_CD)),9,' ') AS DMV_POLICY_OWNER_ZIP_CODE,
    IFF(SUBSTR(SE.POL_VRSN_TXN_TYP,1,1) = 'C','C','N') AS DMV_TRANSACTION_TYPE_CODE,
    IFF(SUBSTR(SE.POL_VRSN_TXN_TYP,1,2) ='CN','00000000',TO_CHAR(SE.POL_STATE_EFF_DT,'MMDDYYYY')) AS DMV_POLICY_EFFECTIVE_DATE,
    IFF(SUBSTR(SE.POL_VRSN_TXN_TYP,1,1) = 'C', TO_CHAR(SE.POL_STATE_EFF_DT,'MMDDYYYY'),'00000000') AS DMV_POLICY_CANCELLATION_DATE,
    TO_CHAR(SYSDATE(),'MMDDYYYY') AS DMV_DATE_STAMP,
    RPAD(LTRIM(RTRIM(SE.POL_NUM)),30,' ') AS DMV_POLICY_NUMBER,
    RPAD(' ',31) AS DMV_RESERVED,
    TO_VARCHAR(v_BATCH_START_DT, 'YYYY-MM-DD') AS BATCH_START_DT,
    TO_VARCHAR(v_BATCH_END_DT, 'YYYY-MM-DD') AS BATCH_END_DT,
    TO_VARCHAR(v_RPRTG_PERIOD_START_DT, 'YYYY-MM-DD') AS RPRTG_PERIOD_START_DT,
    TO_VARCHAR(v_RPRTG_PERIOD_END_DT, 'YYYY-MM-DD') AS RPRTG_PERIOD_END_DT,
    -- Placeholder for Lookups (will be handled in subsequent steps)
    NULL AS lkp_INSD_PTY_PK,
    NULL AS lkp_SRC_PTY_ID,
    NULL AS lkp_NAM_FST,
    NULL AS lkp_NAM_LST,
    NULL AS lkp_NAM_MDL,
    NULL AS lkp_NAM_SFX,
    NULL AS lkp_PMRY_NAMD_INSD_FLG,
    NULL AS lkp_DRVR_FLG,
    NULL AS lkp_DRVR_LIC_NUM,
    NULL AS lkp_DRVR_LIC_STATE,
    NULL AS NCIC_VAL
FROM 
    SQ_S10_NJ_DMV_EXTRACT SE;










-- Step 3.1: Create Temporary Table for LKP_ALT_LIC_NUM
CREATE OR REPLACE TEMPORARY TABLE LKP_ALT_LIC_NUM AS
SELECT 
    T_POL_PTY_DIM_HST.INSD_PTY_PK AS INSD_PTY_PK,
    T_POL_PTY_DIM_HST.SRC_PTY_ID AS SRC_PTY_ID,
    T_POL_PTY_DIM_HST.NAM_FST AS NAM_FST,
    T_POL_PTY_DIM_HST.NAM_LST AS NAM_LST,
    T_POL_PTY_DIM_HST.NAM_MDL AS NAM_MDL,
    T_POL_PTY_DIM_HST.NAM_SFX AS NAM_SFX,
    T_POL_PTY_DIM_HST.PMRY_NAMD_INSD_FLG AS PMRY_NAMD_INSD_FLG,
    T_POL_PTY_DIM_HST.NAMD_INSD_FLG AS NAMD_INSD_FLG,
    T_POL_PTY_DIM_HST.DRVR_FLG AS DRVR_FLG,
    T_POL_PTY_DIM_HST.DRVR_LIC_NUM AS DRVR_LIC_NUM,
    T_POL_PTY_DIM_HST.DRVR_LIC_STATE AS DRVR_LIC_STATE,
    T_POL_PTY_DIM_HST.POL_PK AS POL_PK
FROM 
    T_POL_PTY_DIM_HST
QUALIFY 
    ROW_NUMBER() OVER (PARTITION BY POL_PK ORDER BY POL_PK) = 1;






-- Step 3.2: Create Temporary Table for LKP_NCIC_VEH_MAKE_CODE
CREATE OR REPLACE TEMPORARY TABLE LKP_NCIC_VEH_MAKE_CODE AS
SELECT 
    NCIC_VAL,
    VEH_MAKE_CD
FROM 
    NCIC_CODES_XREF
QUALIFY 
    ROW_NUMBER() OVER (PARTITION BY VEH_MAKE_CD ORDER BY VEH_MAKE_CD) = 1;




-- Step 4: Update EXPTRANS with Lookups
CREATE OR REPLACE TEMPORARY TABLE EXPTRANS_UPDATED AS
SELECT 
    ET.*,
    LKP_ALT.LKP_INSD_PTY_PK,
    LKP_ALT.LKP_SRC_PTY_ID,
    LKP_ALT.LKP_NAM_FST,
    LKP_ALT.LKP_NAM_LST,
    LKP_ALT.LKP_NAM_MDL,
    LKP_ALT.LKP_NAM_SFX,
    LKP_ALT.LKP_PMRY_NAMD_INSD_FLG,
    LKP_ALT.LKP_DRVR_FLG,
    LKP_ALT.LKP_DRVR_LIC_NUM,
    LKP_ALT.LKP_DRVR_LIC_STATE,
    LKP_NCIC.NCIC_VAL
FROM 
    EXPTRANS ET
LEFT JOIN 
    LKP_ALT_LIC_NUM LKP_ALT ON LKP_ALT.POL_PK = ET.POL_PK
LEFT JOIN 
    LKP_NCIC_VEH_MAKE_CODE LKP_NCIC ON LKP_NCIC.VEH_MAKE_CD = ET.MK;





-- Step 5: Create Temporary Table for EXP_PRIMARY_DRIVER
CREATE OR REPLACE TEMPORARY TABLE EXP_PRIMARY_DRIVER AS
SELECT 
    source_record_id,
    lkp_INSD_PTY_PK AS INSD_PTY_PK_PRMRY_DRVR,
    lkp_SRC_PTY_ID AS SRC_PTY_ID_PRMRY_DRVR,
    lkp_NAM_FST AS NAM_FST_PRMRY_DRVR,
    lkp_NAM_LST AS NAM_LST_PRMRY_DRVR,
    lkp_NAM_MDL AS NAM_MDL_PRMRY_DRVR,
    lkp_NAM_SFX AS NAM_SFX_PRMRY_DRVR,
    lkp_PMRY_NAMD_INSD_FLG AS NAMD_INSD_FLG_PRMRY_DRVR,
    lkp_DRVR_FLG AS DRVR_FLG_PRMRY_DRVR,
    lkp_DRVR_LIC_NUM AS DRVR_LIC_NUM_PRMRY_DRVR,
    lkp_DRVR_LIC_STATE AS DRVR_LIC_STATE_PRMRY_DRVR
FROM 
    EXPTRANS_UPDATED;





-- Step 6: Create Temporary Table for EXPTRANS1
CREATE OR REPLACE TEMPORARY TABLE EXPTRANS1 AS
SELECT 
    ET.source_record_id,
    SEQ.NJ_DMV_UMIS_MTH_BUILD_ID,
    ET.POL_PK,
    ET.POL_NUM,
    ET.POL_SEQ_NUM,
    NULL AS ORIG_POL_PK,
    ET.POL_STATE_VRSN,
    ET.POL_STATE_EFF_DT,
    ET.ACCTG_DT,
    ET.POL_STATE_STAT,
    ET.ROW_XPTN_DT,
    ET.POL_VRSN_TXN_TYP,
    ET.ROW_STAT,
    ET.RCD_ACTN_TYP AS RCD_ACTN_TYP_POL,
    ET.DATA_DT,
    ET.CORP_CD,
    ET.CO_CD,
    ET.SRC_PROD_ID,
    ET.SRC_CD,
    ET.SRC_POL_ID,
    ET.CO_ID,
    ET.PROD_ID,
    ET.CUR_TERM_EFF_DT,
    ET.CUR_TERM_XPTN_DT,
    ET.CNCL_RSN,
    ET.CNCL_TYP,
    ET.CNCL_EFF_DT,
    ET.REINST_EFF_DT,
    ET.REINST_RSN,
    ET.LAPSE_BEGIN_DT,
    ET.LAPSE_END_DT,
    ET.PLN_CD,
    ET.PRIME_CONV_FLG,
    ET.DMV_TRANS_TYPE,
    ET.VEH_UNIT_PK,
    ET.RCD_ACTN_TYP_veh AS RCD_ACTN_TYP_VEH,
    ET.ORGL_EFF_DT,
    ET.VEH_TYP_CD,
    ET.VIN,
    ET.MODEL_YR,
    ET.MK,
    ET.STAT_MAKE_CD,
    ET.NCIC_VAL AS NCIC_VEH_MAKE,
    ET.ADDR_PK,
    ET.PMRY_ADDR_FLG,
    ET.HSE_NUM,
    ET.ADDRESS1,
    ET.ADDRESS2,
    ET.ADDRESS3,
    ET.ADDRESS4,
    ET.CITY,
    ET.STATE,
    ET.CNTY,
    ET.PSTL_CD,
    ET.INSD_PTY_PK AS INSD_PTY_PK_POL_OWNER,
    ET.SRC_PTY_ID AS SRC_PTY_ID_POL_OWNER,
    ET.NAM_FST AS NAM_FST_POL_OWNER,
    ET.NAM_LST AS NAM_LST_POL_OWNER,
    ET.NAM_MDL AS NAM_MDL_POL_OWNER,
    ET.NAM_SFX AS NAM_SFX_POL_OWNER,
    ET.BUS_NAM AS BUS_NAM_POL_OWNER,
    ET.PMRY_NAMD_INSD_FLG AS PMRY_NAMD_INSD_FLG_POL_OWNER,
    ET.NAMD_INSD_FLG AS NAMD_INSD_FLG_POL_OWNER,
    ET.DRVR_FLG AS DRVR_FLG_POL_OWNER,
    ET.DRVR_LIC_NUM AS DRVR_LIC_NUM_POL_OWNER,
    ET.DRVR_LIC_STATE AS DRVR_LIC_STATE_POL_OWNER,
    -- Additional Columns from Primary Driver
    NULL AS ASSOCN_TYP_PRMRY_DRVR,
    PD.INSD_PTY_PK_PRMRY_DRVR,
    PD.SRC_PTY_ID_PRMRY_DRVR,
    PD.NAM_FST_PRMRY_DRVR,
    PD.NAM_LST_PRMRY_DRVR,
    PD.NAM_MDL_PRMRY_DRVR,
    PD.NAM_SFX_PRMRY_DRVR,
    PD.NAMD_INSD_FLG_PRMRY_DRVR,
    PD.DRVR_FLG_PRMRY_DRVR,
    PD.DRVR_LIC_NUM_PRMRY_DRVR,
    PD.DRVR_LIC_STATE_PRMRY_DRVR,
    NULL AS BATCH_ID,
    ET.BATCH_START_DT,
    ET.BATCH_END_DT,
    ET.RPRTG_PERIOD_START_DT,
    ET.RPRTG_PERIOD_END_DT,
    ET.DMV_VIN,
    ET.DMV_MAKE_OF_CAR,
    ET.DMV_YEAR_OF_CAR,
    ET.DMV_MODEL_OF_CAR,
    ET.DMV_INS_COMPANY_CD,
    ET.DMV_POLICY_OWNER_STREET_ADDR,
    ET.DMV_POLICY_OWNER_CITY,
    ET.DMV_POLICY_OWNER_STATE,
    ET.DMV_POLICY_OWNER_ZIP_CODE,
    ET.DMV_TRANSACTION_TYPE_CODE,
    ET.DMV_POLICY_EFFECTIVE_DATE,
    ET.DMV_POLICY_CANCELLATION_DATE,
    ET.DMV_DATE_STAMP,
    ET.DMV_POLICY_NUMBER,
    ET.DMV_RESERVED,
    -- Batch Start and End Dates
    ET.BATCH_START_DT,
    ET.BATCH_END_DT,
    ET.RPRTG_PERIOD_START_DT,
    ET.RPRTG_PERIOD_END_DT,
    ET.lkp_INSD_PTY_PK,
    ET.lkp_SRC_PTY_ID,
    ET.lkp_NAM_FST,
    ET.lkp_NAM_LST,
    ET.lkp_NAM_MDL,
    ET.lkp_NAM_SFX,
    ET.lkp_PMRY_NAMD_INSD_FLG,
    ET.lkp_DRVR_FLG,
    ET.lkp_DRVR_LIC_NUM,
    ET.lkp_DRVR_LIC_STATE,
    ET.NCIC_VAL
FROM 
    EXPTRANS_UPDATED ET
LEFT JOIN 
    EXP_PRIMARY_DRIVER PD ON ET.source_record_id = PD.source_record_id
JOIN 
    (SELECT NEXTVAL('your_sequence_name') AS NJ_DMV_UMIS_MTH_BUILD_ID, source_record_id
     FROM EXPTRANS_UPDATED) SEQ ON ET.source_record_id = SEQ.source_record_id;






CREATE SEQUENCE your_sequence_name START = 1 INCREMENT = 1;

-- Step 7: Create Temporary Table for UPDTRANS
CREATE OR REPLACE TEMPORARY TABLE UPDTRANS AS
SELECT 
    ET1.source_record_id,
    ET1.ADDR_PK,
    ET1.PMRY_ADDR_FLG,
    ET1.HSE_NUM,
    ET1.ADDRESS1,
    ET1.ADDRESS2,
    ET1.ADDRESS3,
    ET1.ADDRESS4,
    ET1.BATCH_START_DT,
    ET1.RPRTG_PERIOD_END_DT,
    ET1.DMV_VIN,
    ET1.BATCH_END_DT,
    ET1.RPRTG_PERIOD_START_DT,
    ET1.DMV_POLICY_EFFECTIVE_DATE,
    ET1.CNCL_RSN,
    ET1.DRVR_LIC_STATE_POL_OWNER,
    ET1.NAM_FST_POL_OWNER,
    ET1.NAMD_INSD_FLG_POL_OWNER,
    ET1.ZIP_FIRST5_CD,
    ET1.REINST_TYP,
    ET1.CO_CD,
    ET1.SRC_PROD_ID,
    ET1.SRC_CD,
    ET1.SRC_POL_ID,
    ET1.PSTL_CD,
    ET1.CITY,
    ET1.STATE,
    ET1.CNTY,
    ET1.RCD_ACTN_TYP_POL,
    ET1.DATA_DT,
    ET1.CORP_CD,
    ET1.DRVR_FLG_POL_OWNER,
    ET1.DRVR_LIC_NUM_POL_OWNER,
    ET1.DMV_DATE_STAMP,
    ET1.DMV_POLICY_NUMBER,
    ET1.DMV_RESERVED,
    ET1.PRCSG_GRP_CD,
    ET1.PROD_CD,
    ET1.REINST_TYP,
    ET1.CO_CD,
    ET1.SRC_CORP_ID,
    ET1.SRC_CO_ID,
    ET1.DMV_POLICY_OWNER_ZIP_CODE,
    ET1.DMV_TRANSACTION_TYPE_CODE,
    ET1.DMV_POLICY_OWNER_STATE,
    ET1.CREATED_BY,
    ET1.CUR_TERM_EFF_DT,
    ET1.CUR_TERM_XPTN_DT,
    ET1.DMV_POLICY_OWNER_CITY,
    ET1.VEH_UNIT_PK,
    ET1.RCD_ACTN_TYP_VEH,
    ET1.ORGL_EFF_DT,
    ET1.REINST_EFF_DT,
    ET1.REINST_RSN,
    ET1.LAPSE_BEGIN_DT,
    ET1.LAPSE_END_DT,
    ET1.PLN_CD,
    ET1.DMV_TRANS_TYPE,
    ET1.INSD_PTY_PK_POL_OWNER,
    ET1.SRC_PTY_ID_POL_OWNER,
    ET1.ACCTG_DT,
    ET1.POL_STATE_STAT,
    ET1.ROW_XPTN_DT,
    ET1.POL_VRSN_TXN_TYP,
    ET1.ROW_STAT,
    ET1.CO_ID,
    ET1.PROD_ID,
    ET1.NAM_LST_POL_OWNER,
    ET1.NAM_MDL_POL_OWNER,
    ET1.NAM_SFX_POL_OWNER,
    ET1.BUS_NAM_POL_OWNER,
    ET1.PMRY_NAMD_INSD_FLG_POL_OWNER,
    ET1.DMV_MAKE_OF_CAR_out AS DMV_MAKE_OF_CAR,
    ET1.NJ_DMV_UMIS_MTH_BUILD_ID,
    ET1.POL_PK,
    ET1.POL_NUM,
    ET1.POL_SEQ_NUM,
    ET1.ORIG_POL_PK,
    ET1.POL_STATE_VRSN,
    ET1.POL_STATE_EFF_DT,
    ET1.DMV_POLICY_CANCELLATION_DATE,
    ET1.NAM_FST_PRMRY_DRVR,
    ET1.NAM_LST_PRMRY_DRVR,
    ET1.NAM_MDL_PRMRY_DRVR,
    ET1.NAM_SFX_PRMRY_DRVR,
    ET1.NAMD_INSD_FLG_PRMRY_DRVR,
    ET1.DRVR_FLG_PRMRY_DRVR,
    ET1.DRVR_LIC_NUM_PRMRY_DRVR,
    ET1.DRVR_LIC_STATE_PRMRY_DRVR,
    ET1.VEH_TYP_CD,
    ET1.VIN,
    ET1.MODEL_YR,
    ET1.MK,
    ET1.STAT_MAKE_CD,
    ET1.CNCL_TYP,
    ET1.ZIP_LAST4_CD,
    ET1.ASSOCN_TYP_PRMRY_DRVR,
    ET1.INSD_PTY_PK_PRMRY_DRVR,
    ET1.SRC_PTY_ID_PRMRY_DRVR,
    ET1.CNCL_EFF_DT,
    ET1.BATCH_ID,
    ET1.CREATE_DT,
    ET1.DMV_DRIVER_LICENSE_NUMBER,
    ET1.DMV_YEAR_OF_CAR,
    ET1.DMV_MODEL_OF_CAR,
    ET1.DMV_INS_COMPANY_CD,
    ET1.DMV_POLICY_OWNER_STREET_ADDR,
    ET1.PRE_CONV_CO_CD,
    -- Additional Logic
    IFF(
        LENGTH(ET1.DRVR_LIC_NUM_POL_OWNER) >= 15 AND 
        UPPER(SUBSTR(ET1.DRVR_LIC_NUM_POL_OWNER,1,1)) IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'),
        'Y','N'
    ) AS POL_OWNER_LIC_LIKELY_NJ_IND,
    IFF(
        LENGTH(ET1.DRVR_LIC_NUM_PRMRY_DRVR) >= 15 AND 
        UPPER(SUBSTR(ET1.DRVR_LIC_NUM_PRMRY_DRVR,1,1)) IN ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'),
        'Y','N'
    ) AS PRMRY_DRVR_LIC_LIKELY_NJ_IND,
    SUBSTR(ET1.PSTL_CD,1,5) AS ZIP_FIRST5_CD,
    SUBSTR(ET1.PSTL_CD,7,4) AS ZIP_LAST4_CD,
    SYSDATE() AS CREATE_DT,
    'M_S10_NJ_DMV_EXTRACT' AS CREATED_BY,
    IFF(
        ET1.DRVR_LIC_NUM_POL_OWNER IS NULL AND ET1.DRVR_LIC_NUM_PRMRY_DRVR IS NULL, 
        '               ',
        IFF(
            ET1.DRVR_LIC_STATE_POL_OWNER = 'NJ' AND ET1.DRVR_LIC_NUM_PRMRY_DRVR IS NULL,
            RPAD(UPPER(ET1.DRVR_LIC_NUM_POL_OWNER),15,' '),
            IFF(
                ET1.DRVR_LIC_STATE_PRMRY_DRVR = 'NJ',
                RPAD(UPPER(ET1.DRVR_LIC_NUM_PRMRY_DRVR),15,' '),
                IFF(
                    ET1.POL_OWNER_LIC_LIKELY_NJ_IND = 'Y',
                    RPAD(UPPER(ET1.DRVR_LIC_NUM_POL_OWNER),15,' '),
                    IFF(
                        ET1.PRMRY_DRVR_LIC_LIKELY_NJ_IND = 'Y',
                        RPAD(UPPER(ET1.DRVR_LIC_NUM_PRMRY_DRVR),15,' '),
                        '               '
                    )
                )
            )
        )
    ) AS DMV_DRIVER_LICENSE_NUMBER,
    IFF(
        ET1.DMV_MAKE_OF_CAR IS NULL AND ET1.NCIC_VEH_MAKE IS NULL AND ET1.MK IS NULL, 
        '     ',
        IFF(
            ET1.DMV_MAKE_OF_CAR IS NULL AND ET1.NCIC_VEH_MAKE IS NULL,
            RPAD(UPPER(SUBSTR(RTRIM(LTRIM(ET1.MK)),1,5)),5,' '),
            IFF(
                ET1.DMV_MAKE_OF_CAR IS NULL,
                RPAD(SUBSTR(RTRIM(LTRIM(ET1.NCIC_VEH_MAKE)),1,5),5,' '),
                UPPER(ET1.DMV_MAKE_OF_CAR)
            )
        )
    ) AS DMV_MAKE_OF_CAR_out
FROM 
    EXPTRANS1 ET1
INNER JOIN 
    EXP_PRIMARY_DRIVER PD ON ET1.source_record_id = PD.source_record_id;




-- Step 8: Create Temporary Table for FINAL_SELECT_S10_NJ_DMV_MTHLY_EXTRACT
CREATE OR REPLACE TEMPORARY TABLE FINAL_SELECT_S10_NJ_DMV_MTHLY_EXTRACT AS
SELECT 
    CAST(NJ_DMV_UMIS_MTH_BUILD_ID AS INTEGER) AS NJ_DMV_UMIS_MTH_BUILD_ID,
    CAST(POL_PK AS INTEGER) AS POL_PK,
    TRIM(POL_NUM) AS POL_NUM,
    CAST(POL_SEQ_NUM AS INTEGER) AS POL_SEQ_NUM,
    CAST(ORIG_POL_PK AS INTEGER) AS ORIG_POL_PK,
    CAST(POL_STATE_VRSN AS INTEGER) AS POL_STATE_VRSN,
    CAST(POL_STATE_EFF_DT AS DATE) AS POL_STATE_EFF_DT,
    CAST(ACCTG_DT AS DATE) AS ACCTG_DT,
    TRIM(POL_STATE_STAT) AS POL_STATE_STAT,
    CAST(ROW_XPTN_DT AS DATE) AS ROW_XPTN_DT,
    TRIM(POL_VRSN_TXN_TYP) AS POL_VRSN_TXN_TYP,
    TRIM(ROW_STAT) AS ROW_STAT,
    TRIM(RCD_ACTN_TYP_POL) AS RCD_ACTN_TYP_POL,
    CAST(DATA_DT AS DATE) AS DATA_DT,
    TRIM(CORP_CD) AS CORP_CD,
    TRIM(CO_CD) AS CO_CD,
    CAST(SRC_PROD_ID AS INTEGER) AS SRC_PROD_ID,
    TRIM(SRC_CD) AS SRC_CD,
    CAST(SRC_POL_ID AS INTEGER) AS SRC_POL_ID,
    CAST(CO_ID AS INTEGER) AS CO_ID,
    CAST(PROD_ID AS INTEGER) AS PROD_ID,
    CAST(SRC_CORP_ID AS INTEGER) AS SRC_CORP_ID,
    CAST(SRC_CO_ID AS INTEGER) AS SRC_CO_ID,
    TRIM(PRCSG_GRP_CD) AS PRCSG_GRP_CD,
    TRIM(PROD_CD) AS PROD_CD,
    CAST(CUR_TERM_EFF_DT AS DATE) AS CUR_TERM_EFF_DT,
    CAST(CUR_TERM_XPTN_DT AS DATE) AS CUR_TERM_XPTN_DT,
    TRIM(CNCL_RSN) AS CNCL_RSN,
    TRIM(CNCL_TYP) AS CNCL_TYP,
    CAST(CNCL_EFF_DT AS DATE) AS CNCL_EFF_DT,
    TRIM(REINST_TYP) AS REINST_TYP,
    CAST(REINST_EFF_DT AS DATE) AS REINST_EFF_DT,
    TRIM(REINST_RSN) AS REINST_RSN,
    CAST(LAPSE_BEGIN_DT AS DATE) AS LAPSE_BEGIN_DT,
    CAST(LAPSE_END_DT AS DATE) AS LAPSE_END_DT,
    TRIM(PLN_CD) AS PLN_CD,
    TRIM(DMV_TRANS_TYPE) AS DMV_TRANS_TYPE,
    CAST(VEH_UNIT_PK AS INTEGER) AS VEH_UNIT_PK,
    TRIM(RCD_ACTN_TYP_VEH) AS RCD_ACTN_TYP_VEH,
    CAST(ORGL_EFF_DT AS DATE) AS ORGL_EFF_DT,
    CAST(VEH_TYP_CD AS VARCHAR(10)) AS VEH_TYP_CD,
    TRIM(VIN) AS VIN,
    CAST(MODEL_YR AS INTEGER) AS MODEL_YR,
    TRIM(MK) AS MK,
    TRIM(STAT_MAKE_CD) AS STAT_MAKE_CD,
    CAST(ADDR_PK AS INTEGER) AS ADDR_PK,
    TRIM(PMRY_ADDR_FLG) AS PMRY_ADDR_FLG,
    TRIM(HSE_NUM) AS HSE_NUM,
    TRIM(ADDRESS1) AS ADDRESS1,
    TRIM(ADDRESS2) AS ADDRESS2,
    TRIM(ADDRESS3) AS ADDRESS3,
    TRIM(ADDRESS4) AS ADDRESS4,
    TRIM(CITY) AS CITY,
    TRIM(STATE) AS STATE,
    TRIM(CNTY) AS CNTY,
    TRIM(PSTL_CD) AS PSTL_CD,
    CAST(ZIP_FIRST5_CD AS VARCHAR(5)) AS ZIP_FIRST5_CD,
    CAST(ZIP_LAST4_CD AS VARCHAR(4)) AS ZIP_LAST4_CD,
    CAST(INSD_PTY_PK_POL_OWNER AS INTEGER) AS INSD_PTY_PK_POL_OWNER,
    CAST(SRC_PTY_ID_POL_OWNER AS INTEGER) AS SRC_PTY_ID_POL_OWNER,
    TRIM(NAM_FST_POL_OWNER) AS NAM_FST_POL_OWNER,
    TRIM(NAM_LST_POL_OWNER) AS NAM_LST_POL_OWNER,
    TRIM(NAM_MDL_POL_OWNER) AS NAM_MDL_POL_OWNER,
    TRIM(NAM_SFX_POL_OWNER) AS NAM_SFX_POL_OWNER,
    TRIM(BUS_NAM_POL_OWNER) AS BUS_NAM_POL_OWNER,
    TRIM(PMRY_NAMD_INSD_FLG_POL_OWNER) AS PMRY_NAMD_INSD_FLG_POL_OWNER,
    TRIM(NAMD_INSD_FLG_POL_OWNER) AS NAMD_INSD_FLG_POL_OWNER,
    TRIM(DRVR_FLG_POL_OWNER) AS DRVR_FLG_POL_OWNER,
    TRIM(DRVR_LIC_NUM_POL_OWNER) AS DRVR_LIC_NUM_POL_OWNER,
    TRIM(DRVR_LIC_STATE_POL_OWNER) AS DRVR_LIC_STATE_POL_OWNER,
    TRIM(ASSOCN_TYP_PRMRY_DRVR) AS ASSOCN_TYP_PRMRY_DRVR,
    CAST(INSD_PTY_PK_PRMRY_DRVR AS INTEGER) AS INSD_PTY_PK_PRMRY_DRVR,
    CAST(SRC_PTY_ID_PRMRY_DRVR AS INTEGER) AS SRC_PTY_ID_PRMRY_DRVR,
    TRIM(NAM_FST_PRMRY_DRVR) AS NAM_FST_PRMRY_DRVR,
    TRIM(NAM_LST_PRMRY_DRVR) AS NAM_LST_PRMRY_DRVR,
    TRIM(NAM_MDL_PRMRY_DRVR) AS NAM_MDL_PRMRY_DRVR,
    TRIM(NAM_SFX_PRMRY_DRVR) AS NAM_SFX_PRMRY_DRVR,
    TRIM(NAMD_INSD_FLG_PRMRY_DRVR) AS NAMD_INSD_FLG_PRMRY_DRVR,
    TRIM(DRVR_FLG_PRMRY_DRVR) AS DRVR_FLG_PRMRY_DRVR,
    TRIM(DRVR_LIC_NUM_PRMRY_DRVR) AS DRVR_LIC_NUM_PRMRY_DRVR,
    TRIM(DRVR_LIC_STATE_PRMRY_DRVR) AS DRVR_LIC_STATE_PRMRY_DRVR,
    CAST(BATCH_ID AS INTEGER) AS BATCH_ID,
    CAST(CREATE_DT AS DATE) AS CREATE_DT,
    TRIM(CREATED_BY) AS CREATED_BY,
    CAST(BATCH_START_DT AS DATE) AS BATCH_START_DT,
    CAST(BATCH_END_DT AS DATE) AS BATCH_END_DT,
    CAST(RPRTG_PERIOD_START_DT AS DATE) AS RPRTG_PERIOD_START_DT,
    CAST(RPRTG_PERIOD_END_DT AS DATE) AS RPRTG_PERIOD_END_DT,
    TRIM(DMV_VIN) AS DMV_VIN,
    TRIM(DMV_DRIVER_LICENSE_NUMBER) AS DMV_DRIVER_LICENSE_NUMBER,
    TRIM(DMV_MAKE_OF_CAR) AS DMV_MAKE_OF_CAR,
    TRIM(DMV_YEAR_OF_CAR) AS DMV_YEAR_OF_CAR,
    TRIM(DMV_MODEL_OF_CAR) AS DMV_MODEL_OF_CAR,
    TRIM(DMV_INS_COMPANY_CD) AS DMV_INS_COMPANY_CD,
    TRIM(DMV_POLICY_OWNER_STREET_ADDR) AS DMV_POLICY_OWNER_STREET_ADDR,
    TRIM(DMV_POLICY_OWNER_CITY) AS DMV_POLICY_OWNER_CITY,
    TRIM(DMV_POLICY_OWNER_STATE) AS DMV_POLICY_OWNER_STATE,
    TRIM(DMV_POLICY_OWNER_ZIP_CODE) AS DMV_POLICY_OWNER_ZIP_CODE,
    TRIM(DMV_TRANSACTION_TYPE_CODE) AS DMV_TRANSACTION_TYPE_CODE,
    TRIM(DMV_POLICY_EFFECTIVE_DATE) AS DMV_POLICY_EFFECTIVE_DATE,
    TRIM(DMV_POLICY_CANCELLATION_DATE) AS DMV_POLICY_CANCELLATION_DATE,
    TRIM(DMV_DATE_STAMP) AS DMV_DATE_STAMP,
    TRIM(DMV_POLICY_NUMBER) AS DMV_POLICY_NUMBER,
    TRIM(DMV_RESERVED) AS DMV_RESERVED,
    TRIM(PRE_CONV_CO_CD) AS PRE_CONV_CO_CD
FROM 
    FINAL_SELECT_S10_NJ_DMV_MTHLY_EXTRACT;



